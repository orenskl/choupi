# The MIT License (MIT)
#
# Copyright (c) 2020, National Cybersecurity Agency of France (ANSSI)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Author: - Guillaume Bouffard <guillaume.bouffard@ssi.gouv.fr>

cmake_minimum_required(VERSION 3.13)

project(CHOUPI)

include(CheckIPOSupported)
enable_language(ASM)

#
# OPTIONS
#

# List of options that can be tweaked by final user. Warning: if you want to
# change the default behavior, do not edit this file directly. Run cmake and
# then edit the CMakeCache.txt of use a tool like ccmake.

# Enable link time optimizations for all targets.
option(CHOUPI_ENABLE_LTO "Enable link time optimisations" ON)
option(CHOUPI_OS_DEBUG "Build choupi-os with debug output" ON)
option(CHOUPI_JCVM_DEBUG "Build choupi with debug output" OFF)

option(CHOUPI_TARGET_PC "PC Version" ON)
option(CHOUPI_TARGET_STM32 "STM32 Version" OFF)

if(CHOUPI_TARGET_STM32)
  set(CHOUPI_TARGET_PC OFF)

  set(CMAKE_SYSTEM_NAME Linux)
  set(CMAKE_SYSTEM_PROCESSOR ARM)

  set(OCD "/usr/share/openocd/scripts/board/st_nucleo_f4.cfg")

  set(TOOLCHAIN_PREFIX arm-none-eabi-)

  set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)
  set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
  set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++)
  set(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}objcopy)
  set(CMAKE_SIZE ${TOOLCHAIN_PREFIX}size)
  set(CMAKE_NM ${TOOLCHAIN_PREFIX}nm)
  set(CMAKE_GDB ${TOOLCHAIN_PREFIX}gdb)

  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

  set(CMAKE_C_FLAGS
      "-mlittle-endian -mthumb -mcpu=cortex-m4 -mthumb-interwork \
       -finline-small-functions -findirect-inlining \
       -fno-common ${CMAKE_C_FLAGS}")

  set(CMAKE_CXX_FLAGS
      "${CMAKE_C_FLAGS} -fexceptions -fno-threadsafe-statics ${CMAKE_CXX_FLAGS}"
  )

  add_link_options("LINKER:--gc-section")
  add_link_options("LINKER:--wrap,__malloc_r")
  add_link_options("LINKER:--wrap,__free_r")
  add_link_options("LINKER:--wrap,__calloc_r")
  add_link_options("LINKER:--wrap,__realloc_r")

  # add_link_options("LINKER:-Map=map.map")

  set(CMAKE_EXE_LINKER_FLAGS_INIT
      "--specs=nano.specs" "--specs=nosys.specs"
      CACHE INTERNAL "")

  add_link_options("LINKER:-T${CMAKE_SOURCE_DIR}/stm32f401xe.ld")
endif(CHOUPI_TARGET_STM32)

if(CHOUPI_TARGET_PC)
  set(CHOUPI_TARGET_STM32 OFF)
endif(CHOUPI_TARGET_PC)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -ggdb")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -ggdb")

set(CMAKE_BUILD_TYPE MinSizeRel)

if(CHOUPI_TARGET_STM32)
  function(firmware_size target)
    add_custom_command(
      TARGET ${target}
      POST_BUILD
      COMMAND ${CMAKE_SIZE} -B
              "${CMAKE_CURRENT_BINARY_DIR}/${target}${CMAKE_EXECUTABLE_SUFFIX}")
  endfunction()

  function(generate_firmware target suffix type)
    add_custom_command(
      TARGET ${target}
      POST_BUILD
      COMMAND
        ${CMAKE_OBJCOPY} --remove-section=.flashloader -O ${type}
        "${CMAKE_CURRENT_BINARY_DIR}/${target}${CMAKE_EXECUTABLE_SUFFIX}"
        "${CMAKE_CURRENT_BINARY_DIR}/${target}${suffix}")
  endfunction()

  function(generate_loader target)
    add_custom_command(
      TARGET ${target}
      POST_BUILD
      COMMAND
        ${CMAKE_OBJCOPY} --only-section=.flashloader -O ihex
        "${CMAKE_CURRENT_BINARY_DIR}/${target}${CMAKE_EXECUTABLE_SUFFIX}"
        "${CMAKE_CURRENT_BINARY_DIR}/loader.hex")
  endfunction()

  function(generate_code target)
    add_custom_command(
      TARGET ${target}
      POST_BUILD
      COMMAND
        ${CMAKE_OBJCOPY} --remove-section=.flashloader -O ihex
        "${CMAKE_CURRENT_BINARY_DIR}/${target}${CMAKE_EXECUTABLE_SUFFIX}"
        "${CMAKE_CURRENT_BINARY_DIR}/code.hex")
  endfunction()
endif(CHOUPI_TARGET_STM32)

#
# COMPILE INFO
#

message("Link-time optimizations: ${CHOUPI_ENABLE_LTO}")

if(CHOUPI_TARGET_PC)
  message("Target: Computer version")
elseif(CHOUPI_TARGET_STM32)
  message("Target: STM32")
endif(CHOUPI_TARGET_PC)

#
# CHOUPI
#

if(CHOUPI_JCVM_DEBUG)
  add_compile_definitions(DEBUG)
endif(CHOUPI_JCVM_DEBUG)

if(CHOUPI_TARGET_PC)
  if(CHOUPI_OS_DEBUG)
    add_custom_target(
      javacardos
      WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/os"
      COMMENT "Building Java Card OS with debug output"
      BYPRODUCTS ${CMAKE_BINARY_DIR}/libjavacard_os.a
      COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/javacard-os
      COMMAND
        cargo build --no-default-features --features host,big_ram
        --manifest-path=${CMAKE_SOURCE_DIR}/os/Cargo.toml
        --target-dir ${CMAKE_BINARY_DIR}/javacard-os/
      VERBATIM)
  else(CHOUPI_OS_DEBUG)
    add_custom_target(
      javacardos
      WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/os"
      COMMENT "Building Java Card OS"
      BYPRODUCTS ${CMAKE_BINARY_DIR}/libjavacard_os.a
      COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/javacard-os
      COMMAND
        cargo build --release --no-default-features --features host,big_ram
        --manifest-path=${CMAKE_SOURCE_DIR}/os/Cargo.toml
        --target-dir ${CMAKE_BINARY_DIR}/javacard-os/
      VERBATIM)
  endif(CHOUPI_OS_DEBUG)

  set(CHOUPI_JAVACARDOS_LIB "${CMAKE_BINARY_DIR}")
elseif(CHOUPI_TARGET_STM32)
  if(CHOUPI_OS_DEBUG)
    set(ENV{CARGOPROFILE} "debug")
    add_custom_target(
      javacardos
      COMMENT "Building Java Card OS in DEBUG mode"
      WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/os"
      BYPRODUCTS ${CMAKE_SOURCE_DIR}/libjavacard_os.a
      COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/javacard-os
      COMMAND
        cargo build --features stm32f401re --target thumbv7em-none-eabi 
        --target-dir ${CMAKE_BINARY_DIR}/javacard-os/
      VERBATIM)
      set(CHOUPI_JAVACARDOS_LIB "${CMAKE_BINARY_DIR}/javacard-os/thumbv7em-none-eabi/debug")
  else(CHOUPI_OS_DEBUG)
    set(ENV{CARGOPROFILE} "release")
    add_custom_target(
      javacardos
      COMMENT "Building Java Card OS in RELEASE mode"
      WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/os"
      BYPRODUCTS ${CMAKE_SOURCE_DIR}/libjavacard_os.a
      COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/javacard-os
      COMMAND
        cargo build --release --features stm32f401re --target thumbv7em-none-eabi
        --target-dir ${CMAKE_BINARY_DIR}/javacard-os/
      VERBATIM)
      set(CHOUPI_JAVACARDOS_LIB "${CMAKE_BINARY_DIR}/javacard-os/thumbv7em-none-eabi/release")
  endif(CHOUPI_OS_DEBUG)

endif(CHOUPI_TARGET_PC)

add_custom_target(
  javacard-sdk
  COMMENT "Building Java Card API"
  COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/javacard-api/
  COMMAND ant -f ${CMAKE_SOURCE_DIR}/javacard-sdk/javacard-api/build.xml
          -Dbuild.dir=${CMAKE_BINARY_DIR}/javacard-api/ clean build
  VERBATIM)

if(CHOUPI_TARGET_PC)
  add_custom_target(
    rommask
    DEPENDS javacard-sdk
    COMMENT "Generating Java Card ROM mask"
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/javacard-sdk/rommask"
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/rommask/
    COMMAND make
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/rommask/
    COMMAND
      ${CMAKE_COMMAND} -E copy
      ${CMAKE_SOURCE_DIR}/javacard-sdk/rommask/target/rommask-1.0-jar-with-dependencies.jar
      ${CMAKE_BINARY_DIR}/rommask/rommask.jar
    COMMAND
      java -jar ${CMAKE_BINARY_DIR}/rommask/rommask.jar
      ${CMAKE_BINARY_DIR}/javacard-api ${CMAKE_BINARY_DIR}/flash
      ${CMAKE_BINARY_DIR}/jni.hpp fr.gouv.ssi.starter.Starter.run
    VERBATIM)
elseif(CHOUPI_TARGET_STM32)
  add_custom_target(
    rommask
    DEPENDS javacard-sdk
    COMMENT "Generating Java Card ROM mask"
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/javacard-sdk/rommask"
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/rommask/
    COMMAND make
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/rommask/
    COMMAND
      ${CMAKE_COMMAND} -E copy
      ${CMAKE_SOURCE_DIR}/javacard-sdk/rommask/target/rommask-1.0-jar-with-dependencies.jar
      ${CMAKE_BINARY_DIR}/rommask/rommask.jar
    COMMAND
      java -jar ${CMAKE_BINARY_DIR}/rommask/rommask.jar --compactHex 08020000
      ${CMAKE_BINARY_DIR}/javacard-api ${CMAKE_BINARY_DIR}/flash.hex
      ${CMAKE_BINARY_DIR}/jni.hpp fr.gouv.ssi.starter.Starter.run
    VERBATIM)
endif(CHOUPI_TARGET_PC)

# JCVM source files
file(GLOB_RECURSE JCVM_CORE_SOURCES_FILES
     "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")

if(CHOUPI_TARGET_PC)

  add_executable(choupi "${JCVM_CORE_SOURCES_FILES}")

  target_include_directories(
    choupi PUBLIC ${CMAKE_BINARY_DIR} "${CMAKE_SOURCE_DIR}/src"
                  "${CMAKE_SOURCE_DIR}/os/src")

  find_package(
    Boost 1.67
    COMPONENTS program_options
    REQUIRED)
  include_directories(${Boost_INCLUDE_DIRS})

  target_link_libraries(choupi ${Boost_LIBRARIES})
endif(CHOUPI_TARGET_PC)

if(CHOUPI_TARGET_STM32)

  add_executable(
    choupi
    "${JCVM_CORE_SOURCES_FILES}"
    "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f401xe.s"
    "${CMAKE_SOURCE_DIR}/os/src/malloc.c"
    "${CMAKE_SOURCE_DIR}/os/src/stm32f4xx_it.c"
    "${CMAKE_SOURCE_DIR}/os/src/system_stm32f4xx.c"
    "${CMAKE_SOURCE_DIR}/os/src/newlib_stubs.c"
    "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c"
    "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c"
    "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c"
    "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c"
    "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
    "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c"
  )

  target_include_directories(
    choupi
    PUBLIC
      ${CMAKE_BINARY_DIR}
      "${CMAKE_SOURCE_DIR}/src"
      "${CMAKE_SOURCE_DIR}/os/src"
      "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers"
      "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/STM32F4xx_HAL_Driver/Inc/"
      "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/CMSIS/Device/ST/STM32F4xx/Include/"
      "${CMAKE_SOURCE_DIR}/os/STM32CubeF4/Drivers/CMSIS/Include/")

  # -DSTM32F401xE
  add_compile_definitions(STM32F401xE)
endif(CHOUPI_TARGET_STM32)

set_property(TARGET choupi PROPERTY CXX_STANDARD 17)

if(CHOUPI_ENABLE_LTO)
  check_ipo_supported(RESULT result OUTPUT output)
  if(result)
    set_target_properties(choupi PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)
  else()
    message(WARNING "IPO is not supported: ${output}")
  endif()
endif(CHOUPI_ENABLE_LTO)

add_dependencies(choupi rommask)
add_dependencies(choupi javacardos)

if(CHOUPI_TARGET_PC)
  # -DPC_VERSION
  add_compile_definitions(PC_VERSION)

  # -lutil
  target_link_libraries(choupi util)

  # -ldl
  target_link_libraries(choupi dl)

  # -lrt
  target_link_libraries(choupi rt)

  # -lpthread
  set(THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads REQUIRED)
  target_link_libraries(choupi Threads::Threads)

  # -lgcc_s
  target_link_libraries(choupi gcc_s)

  # -lc
  target_link_libraries(choupi c)

  # -lm
  target_link_libraries(choupi m)
endif()

target_link_libraries(choupi -L${CHOUPI_JAVACARDOS_LIB})
target_link_libraries(choupi javacard_os)

if(CHOUPI_TARGET_STM32)
  generate_loader(choupi)
  generate_code(choupi)
  generate_firmware(choupi .bin binary)
  firmware_size(choupi)
endif(CHOUPI_TARGET_STM32)

#
# CUSTOM COMMANDS
#

# Custom command to beautify the sources
add_custom_target(
  beautify
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  COMMAND
    astyle -r -n --style=kr -s2 --attach-namespaces --add-brackets
    --close-templates --indent-modifiers --indent-switches --break-blocks
    --indent-col1-comments --indent-preproc-block --indent-preproc-define
    --indent-classes --indent-namespaces --min-conditional-indent=0
    --lineend=linux --pad-oper --pad-comma --pad-header --unpad-paren
    --align-pointer=name --align-reference=name 'src/*.cpp' 'src/*.h*'
    'test/*.cpp')

if(CHOUPI_TARGET_STM32)
  add_custom_target(
    ocd
    COMMENT "Starting opencd"
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND openocd -f ${OCD}
    VERBATIM)

  add_custom_target(
    load
    COMMENT "Starting rlwrap"
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND echo
            "To flash, run the following command in the next-to-come shell:"
    COMMAND
      echo
      "reset halt; flash write_image erase loader.hex; flash write_image erase code.hex; flash write_image erase flash.hex; reset run"
    COMMAND rlwrap nc localhost 4444
    VERBATIM)

  add_custom_target(
    gdb
    COMMENT "Starting debugging"
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND ${CMAKE_GDB} choupi -ex "target extended localhost:3333"
    VERBATIM)

endif(CHOUPI_TARGET_STM32)
